{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ICOS Carbon Portal Python Library ICOS The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ This library provides an easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from dowloading and maintaining a local copy of data files and if you choose to use our Juypter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data\" approach, to store and use the data locally, we suggest you go to the website and \"download\" the data. The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy tools for provenance, citation and reprocuibility, etc.. Hence you only need to store a list of pid's (persistent digital object identifiers), or you can use one of the built in sparql queries, to reproduce always exactly the same result, regardless on which computer you run it. You can share your code with colleges, whithout the need of moving data around. Basically you bring the software to the data, rather then data to the software. This is especially true, if you create a Jupyter Notebook hosted at the Carbon Portal. cd20200715","title":"About"},{"location":"#welcome-to-the-icos-carbon-portal-python-library","text":"","title":"Welcome to the ICOS Carbon Portal Python Library"},{"location":"#icos","text":"The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ This library provides an easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from dowloading and maintaining a local copy of data files and if you choose to use our Juypter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data\" approach, to store and use the data locally, we suggest you go to the website and \"download\" the data. The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data and to give all the users easy tools for provenance, citation and reprocuibility, etc.. Hence you only need to store a list of pid's (persistent digital object identifiers), or you can use one of the built in sparql queries, to reproduce always exactly the same result, regardless on which computer you run it. You can share your code with colleges, whithout the need of moving data around. Basically you bring the software to the data, rather then data to the software. This is especially true, if you create a Jupyter Notebook hosted at the Carbon Portal. cd20200715","title":"ICOS"},{"location":"examples/","text":"Examples Digital Object For the example below, we assume that you know how to get hold of the URI use at the Carbon Portal. You can read more about this in the Modules section. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc : ICOS Atmosphere Level 2 data, Norunda, release 2019-1. Go to the landing page find more information. DataFrame from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() data.head(10) Printing the first 10 rows of the data (data.head(10)) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976 Minimalistic Plot This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methan concentrations over time. import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() data.plot(x='TIMESTAMP', y='ch4', grid=True) plt.show() Plot with Title and Units To get a useful plot, at least we should have a title and the unit of measurement is absolutely paramount: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() # extract information from the dobj meta data # look at dobj.info() for a full list unit = dobj.info[1].unit[dobj.info[1]['colName'] =='ch4'].values[0] title = dobj.info[0].specLabel[0] title = dobj.info[2].stationName[0] + ' (' + dobj.info[2].stationId[0] + ')' title = title + '\\n' + dobj.info[0].specLabel[0] plot = data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show() Stations Station Id's The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsovever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdlist() # returns a Pandas DataFrame stationList.columns # what information do we get back? ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project','theme'] stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv A station Object Let's create a station object and have a look what information is provided with the functin .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attrib\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('IT-Noe') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns ['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel','samplingheight', 'datalevel', 'bytes'] myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt..... most important is the dobj column. You can use the content of the column 'dobj' to extract data. Now we put everything together from icoscp.cpb.dobj import Dobj from icoscp.station import station myStation = station.get('SE-Nor') myDobj = Dobj(myStation.data().dobj[1]) # this would be the second record from above table (drought2018FluxnetProduct) data = myDobj.get() data.columns ['GPP_DT_VUT_REF', 'GPP_NT_VUT_REF', 'H_F_MDS', 'H_F_MDS_QC', 'LE_F_MDS','LE_F_MDS_QC', 'NEE_VUT_REF', 'NEE_VUT_REF_QC', 'RECO_DT_VUT_REF','RECO_NT_VUT_REF', 'SW_IN_F', 'SW_IN_F_QC', 'TA_F', 'TA_F_QC','TIMESTAMP', 'TIMESTAMP_END', 'VPD_F', 'VPD_F_QC'] List of Stations There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ... cd20200715","title":"Examples"},{"location":"examples/#examples","text":"","title":"Examples"},{"location":"examples/#digital-object","text":"For the example below, we assume that you know how to get hold of the URI use at the Carbon Portal. You can read more about this in the Modules section. The following examples will use the URI https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc : ICOS Atmosphere Level 2 data, Norunda, release 2019-1. Go to the landing page find more information.","title":"Digital Object"},{"location":"examples/#dataframe","text":"from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() data.head(10) Printing the first 10 rows of the data (data.head(10)) should yield the following table: id Flag NbPoints Stdev TIMESTAMP ch4 0 N 0 -9.990 2017-04-01 00:00:00 NaN 1 N 0 -9.990 2017-04-01 01:00:00 NaN 2 O 9 0.079 2017-04-01 02:00:00 1948.660034 3 O 16 1.070 2017-04-01 03:00:00 1950.900024 4 O 17 0.817 2017-04-01 04:00:00 1953.229980 5 O 16 0.271 2017-04-01 05:00:00 1956.319946 6 O 16 0.590 2017-04-01 06:00:00 1957.810059 7 O 16 0.736 2017-04-01 07:00:00 1960.550049 8 O 16 0.429 2017-04-01 08:00:00 1962.540039 9 O 17 0.861 2017-04-01 09:00:00 1965.349976","title":"DataFrame"},{"location":"examples/#minimalistic-plot","text":"This first example shows how to extract a data file and create a plot. It is the easiest way to load the data into a Pandas DataFrame in your Python environment. The DataFrame contains the following columNames: Flag, NbPoints, Stdev, TIMESTAMP, ch4. Let's load the data and create a plot for measured methan concentrations over time. import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() data.plot(x='TIMESTAMP', y='ch4', grid=True) plt.show()","title":"Minimalistic Plot"},{"location":"examples/#plot-with-title-and-units","text":"To get a useful plot, at least we should have a title and the unit of measurement is absolutely paramount: import matplotlib.pyplot as plt from icoscp.cpb.dobj import Dobj dobj = Dobj('https://meta.icos-cp.eu/objects/lNJPHqvsMuTAh-3DOvJejgYc') data = dobj.get() # extract information from the dobj meta data # look at dobj.info() for a full list unit = dobj.info[1].unit[dobj.info[1]['colName'] =='ch4'].values[0] title = dobj.info[0].specLabel[0] title = dobj.info[2].stationName[0] + ' (' + dobj.info[2].stationId[0] + ')' title = title + '\\n' + dobj.info[0].specLabel[0] plot = data.plot(x='TIMESTAMP', y='ch4', grid=True, title=title) plot.set(ylabel=unit) plt.show()","title":"Plot with Title and Units"},{"location":"examples/#stations","text":"","title":"Stations"},{"location":"examples/#station-ids","text":"The function to get the station id's might be something you will use a lot. Based on a station id you can get all the dobj id's (PID/URI) and hence access to the data. So if you have no idea whatsovever what stations are available, you came to the right place: from icoscp.station import station stationList = station.getIdlist() # returns a Pandas DataFrame stationList.columns # what information do we get back? ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project','theme'] stationList.head(5) uri id name ... project theme ... SE-Sto Abisko-Stordalen Palsa Bog ... ICOS ES ... IT-Noe Arca di Noe - Le Prigionette ... ICOS ES ... UK-AMo Auchencorth Moss ... ICOS ES ... FR-Aur Aurade ... ICOS ES ... 11BE BE-SOOP-Belgica ... ICOS OS Now you have basic information about a station, but most important you got the station id as well. NOTE: to create a station object you need to provide the station id as is CaseSensitiv","title":"Station Id's"},{"location":"examples/#a-station-object","text":"Let's create a station object and have a look what information is provided with the functin .info() . Each entry from \"info\" is an attribute and can be extracted with \"myStation.attrib\". In the following example you can access the station name with myStation.name from icoscp.station import station myStation = station.get('IT-Noe') myStation.info() { 'stationId': 'SE-Nor', 'name': 'Norunda', 'theme': 'ES', 'icosclass': '2', 'siteType': 'Forest', 'lat': 60.0865, 'lon': 17.4795, 'eas': None, 'eag': '36', 'firstName': 'Meelis', 'lastName': 'M\u00f6lder', 'email': 'meelis.molder@nateko.lu.se', 'country': 'SE', 'project': ['ICOS'], 'uri': ['http://meta.icos-cp.eu/resources/stations/ES_SE-Nor']} myStation.products() # return DataFrame with all products available from this station id specification 0 Drought 2018 Archive Product 1 Ecosystem meteo time series (ICOS Sweden) 2 Ecosystem fluxes time series (ICOS Sweden) 3 Ecosystem eco time series (ICOS Sweden) 4 Drought 2018 FLUXNET Product 5 ICOS ETC Archive Product 6 ICOS ETC FLUXNET Product All the dobj URI's (ultimately containing the data itself) can be retrieved with \"myStation.data()\" let see what columns are provided. The most important information will be the 'dobj' column. This contains the link to the data and can be used to extract the data. from icoscp.station import station myStation = station.get('SE-Nor') myStation.data().columns ['station', 'dobj', 'spec', 'timeStart', 'timeEnd', 'specLabel','samplingheight', 'datalevel', 'bytes'] myStation.data(level='2') # return a DataFrame with Level 2 data objects for the station station dobj spec ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/KfJjYyksI2nxCiJU36UfYVY_ .../dought2018ArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/L-in6TpOcGjmXruwi3ESD9G2 .../drought2018FluxnetProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/mBPKiB9tIQZQGrsy8ehAinvz .../etcArchiveProduct ...stations/ES_SE-Nor https://meta.icos-cp.eu/objects/XA_Ifq7BKqS0tkQd4dGVEFnM .../etcFluxnetProduct This is not the full output, just an excerpt..... most important is the dobj column. You can use the content of the column 'dobj' to extract data. Now we put everything together from icoscp.cpb.dobj import Dobj from icoscp.station import station myStation = station.get('SE-Nor') myDobj = Dobj(myStation.data().dobj[1]) # this would be the second record from above table (drought2018FluxnetProduct) data = myDobj.get() data.columns ['GPP_DT_VUT_REF', 'GPP_NT_VUT_REF', 'H_F_MDS', 'H_F_MDS_QC', 'LE_F_MDS','LE_F_MDS_QC', 'NEE_VUT_REF', 'NEE_VUT_REF_QC', 'RECO_DT_VUT_REF','RECO_NT_VUT_REF', 'SW_IN_F', 'SW_IN_F_QC', 'TA_F', 'TA_F_QC','TIMESTAMP', 'TIMESTAMP_END', 'VPD_F', 'VPD_F_QC']","title":"A station Object"},{"location":"examples/#list-of-stations","text":"There is a built in function to extract a list of stations. Be aware that if you extract all ICOS stations, a lot of information is gathered and retrieved. At the time of writing there are over a 100 stations and in can take up to a minute to extract all. from icoscp.station import station icosStations = station.getList() for s in icosStations: print(s.stationId, s.name, s.lat, s.lon) SE-Sto Abisko-Stordalen Palsa Bog 68.35596 19.04521 IT-Noe Arca di Noe - Le Prigionette 40.60617 8.15117 UK-AMo Auchencorth Moss 55.7925 -3.24362 FR-Aur Aurade 43.54965 1.106103 ... cd20200715","title":"List of Stations"},{"location":"faq/","text":"Nice to have attribute 'sampling height' for Dobj search for station by Name attribute 'license' for data object Known issues Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere). cd20200715","title":"FAQ"},{"location":"faq/#_1","text":"","title":""},{"location":"faq/#nice-to-have","text":"attribute 'sampling height' for Dobj search for station by Name attribute 'license' for data object","title":"Nice to have"},{"location":"faq/#known-issues","text":"Stations are associated with the stationID. This means that at the moment a combined station, certified for Ecosystem AND Atmosphere, has two different stationId's and hence to access ALL data for such a station you need provide a list of stationId's to find a complete set of data products. Example Norunda, Sweden (stationId \"SE-Nor\" for Ecosystem, stationId \"NOR\" for Atmosphere). cd20200715","title":"Known issues"},{"location":"install/","text":"Installation This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github. At the moment the master branch is found at https://github.com/ICOS-Carbon-Portal/jupyter. Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.7.x and we assume that any recent Python distribution should work. If you have trouble to run the library, we are very keen to know why. Please get in contact. pip official release The recommended way of installation is by using pip: pip install icoscp the installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda (https://docs.conda.io/en/latest/miniconda.html) you can create a new environment with: conda create -n icos python activate icos pip install icoscp pip latest version Alternative you can download / fork the github repo and install the distribution file with - pip install path/to/icoscp-MAJOR.MINOR.MICRO.tar.gz dependencies the following modules are required by the library: requests pandas tqdm cd20200715","title":"Installation"},{"location":"install/#installation","text":"This library is in active development and may change at any time. We do our best to keep the function calls and parameters consistent, but without a guarantee. You can follow the development on Github. At the moment the master branch is found at https://github.com/ICOS-Carbon-Portal/jupyter. Create an issue to leave comments, suggestions or if you find something not working as expected. The library has not been tested on many different operating systems and environments, hence we appreciate you telling us what is good and bad. The library is developed with Python 3.7.x and we assume that any recent Python distribution should work. If you have trouble to run the library, we are very keen to know why. Please get in contact.","title":"Installation"},{"location":"install/#pip-official-release","text":"The recommended way of installation is by using pip: pip install icoscp the installation should take care of any dependencies, but to successfully access any data object from the ICOS Carbon Portal you need to have a working internet connection. We would encourage you to use a virtual environment for python to test this library. For example with mini-conda (https://docs.conda.io/en/latest/miniconda.html) you can create a new environment with: conda create -n icos python activate icos pip install icoscp","title":"pip official release"},{"location":"install/#pip-latest-version","text":"Alternative you can download / fork the github repo and install the distribution file with - pip install path/to/icoscp-MAJOR.MINOR.MICRO.tar.gz","title":"pip latest version"},{"location":"install/#dependencies","text":"the following modules are required by the library: requests pandas tqdm cd20200715","title":"dependencies"},{"location":"modules/","text":"Content The following modules are available in the library to find and access data hosted at the Carbon Portal. After a succesful installation into your python environment you should be able to load the modules with: from icoscp.cpb import Dobj from icoscp.station import station from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls dobj This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal (https://data.icos-cp.eu) to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistend identifier in the form of a URL. Hence each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following two statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') Attributes: Dobj.citation Citation string Return STR Dobj.colNames Available column names. This information is part of the Dobj.info, which holds all the available meta data. Return pandas.core.series.Series Dobj.dateTimeConvert = True Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp. By default this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to issue the .get() command. Return BOOL Dobj.dobj = PID Set or retrievethe PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is succesfull, the 'valid' property is set to True Return STR Dobj.get() Retrieve the actual data for the PID. Retrun Pandas DataFrame Dobj.valid True if PID is set and found at the ICOS Carbon Portal Return BOOL All Dobj related meta data is available in the following properties. Dobj.info This will return a list of three pandas data frames which contain meta data. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. Return LIST[Pandas DataFrame] Dobj.lat Latitude for station Return FLOAT Dobj.lon Longitute for station Return FLOAT Dobj.elevation Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT Dobj.station Station name Return STR station The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available abouthe the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated meta data. The meta data is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend to use the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list attributes are available: Station.country Country code Return STR Station.data(level=None) All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame Station.eag Elevation above ground , if available. Please note, this is a general information about the height of the tower. This is NOT a sampling height and it is not guranteed to be accurate. Return FLOAT Station.eas Elevation above sea level in meter. Return FLOAT Station.icosclass Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR Station.firstName PI (Principal Investigator) First Name. Return STR Station.lastName PI (Principal Investigator) last name Return STR Station.email PI (Principal Investigator) email address Return STR Station.lat Latitude for the station. Return FLOAT Station.lon Longitude for the station. Return FLOAT Station.name Returns the full name for the station. Return STR Station.project ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST Station.stationId Set or retrieve the StationId Return STR Station.theme For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR Station.uri Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST Station.valid True if stationId is found. Return BOOL Convenience functions The following three functions are recommend to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of): .getIdList() station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame .get() station.get('StationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object .getList() station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. .getList(['as', 'os']) list with ICOS atmospheric and ocean stations .getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects] sparql At the ICOS Carbon Portal we store all data and meta data as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The ouput format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html']. RunSparql.data If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False as BOOL. Return BOOL | STR RunSparql.query = 'query' Retrieve or set the query. Return STR RunSparql.format = 'fmt' Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR RunSparql.format = 'fmt' Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return TUPLE | FMT RunSparql.run() This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT cd20200715","title":"Modules"},{"location":"modules/#content","text":"The following modules are available in the library to find and access data hosted at the Carbon Portal. After a succesful installation into your python environment you should be able to load the modules with: from icoscp.cpb import Dobj from icoscp.station import station from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls","title":"Content"},{"location":"modules/#dobj","text":"This is the basic module to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal (https://data.icos-cp.eu) to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistend identifier in the form of a URL. Hence each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). Load the module with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') You can initialise a Dobj with a PID. The following two statements yield the same result. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') Attributes:","title":"dobj"},{"location":"modules/#dobjcitation","text":"Citation string Return STR","title":"Dobj.citation"},{"location":"modules/#dobjcolnames","text":"Available column names. This information is part of the Dobj.info, which holds all the available meta data. Return pandas.core.series.Series","title":"Dobj.colNames"},{"location":"modules/#dobjdatetimeconvert-true","text":"Set or retrieve. Default True . The binary data representation provides a UTC Timestamp as Unixtimestamp. By default this is converted to a DateTimeObject ( pandas._libs.tslibs.timestamps.Timestamp ). If you prefer to have the raw Unixtimestamp ( numpy.float64 ), set Dobj.dateTimeConvert = False prior to issue the .get() command. Return BOOL","title":"Dobj.dateTimeConvert = True"},{"location":"modules/#dobjdobj-pid","text":"Set or retrievethe PID for the Dobj, default is empty (\"\"). If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is succesfull, the 'valid' property is set to True Return STR","title":"Dobj.dobj = PID"},{"location":"modules/#dobjget","text":"Retrieve the actual data for the PID. Retrun Pandas DataFrame","title":"Dobj.get()"},{"location":"modules/#dobjvalid","text":"True if PID is set and found at the ICOS Carbon Portal Return BOOL All Dobj related meta data is available in the following properties.","title":"Dobj.valid"},{"location":"modules/#dobjinfo","text":"This will return a list of three pandas data frames which contain meta data. info[0] -> information about the dobj like, url, specification, number of rows, related file name. info[1] -> information about the data like colName, value type, unit, kind info[2] -> information about the station, where the data was obtained. Name, id, lat, lon etc.. Return LIST[Pandas DataFrame]","title":"Dobj.info"},{"location":"modules/#dobjlat","text":"Latitude for station Return FLOAT","title":"Dobj.lat"},{"location":"modules/#dobjlon","text":"Longitute for station Return FLOAT","title":"Dobj.lon"},{"location":"modules/#dobjelevation","text":"Elevation above sea level for station. Be aware, this is NOT the sampling height for the data points. Return FLOAT","title":"Dobj.elevation"},{"location":"modules/#dobjstation","text":"Station name Return STR","title":"Dobj.station"},{"location":"modules/#station","text":"The station module provides a search facility to explore ICOS stations and find associated data objects and data products. There is a lot of information available abouthe the ICOS stations, partner countries, measured variables and much more in the ICOS Handbook . load the module with: from icoscp.station import station classmethod station.Station() The station object is primarily a data structure to store the associated meta data. The meta data is provided with specific and complex Sparql queries. It is possible to instantiate this class on its own, but we recommend to use the convenience functions station.getIdList() station.get('StationID') station.getList() as described further below to create the station object. Once you have a created valid station object a list attributes are available:","title":"station"},{"location":"modules/#stationcountry","text":"Country code Return STR","title":"Station.country"},{"location":"modules/#stationdatalevelnone","text":"All associated data object for the station are returned. ICOS distinguishes data in terms of how processed they are. Data level 1: Near Real Time Data (NRT) or Internal Work data (IW). Data level 2: The final quality checked ICOS RI data set, published by the CFs, to be distributed through the Carbon Portal. This level is the ICOS-data product and free available for users. Data level 3: All kinds of elaborated products by scientific communities that rely on ICOS data products are called Level 3 data. Return Pandas DataFrame","title":"Station.data(level=None)"},{"location":"modules/#stationeag","text":"Elevation above ground , if available. Please note, this is a general information about the height of the tower. This is NOT a sampling height and it is not guranteed to be accurate. Return FLOAT","title":"Station.eag"},{"location":"modules/#stationeas","text":"Elevation above sea level in meter. Return FLOAT","title":"Station.eas"},{"location":"modules/#stationicosclass","text":"Classification for certified ICOS stations. Please consult the ICOS Handbook for further information about the Class 1&2 certificate. Return STR","title":"Station.icosclass"},{"location":"modules/#stationfirstname","text":"PI (Principal Investigator) First Name. Return STR","title":"Station.firstName"},{"location":"modules/#stationlastname","text":"PI (Principal Investigator) last name Return STR","title":"Station.lastName"},{"location":"modules/#stationemail","text":"PI (Principal Investigator) email address Return STR","title":"Station.email"},{"location":"modules/#stationlat","text":"Latitude for the station. Return FLOAT","title":"Station.lat"},{"location":"modules/#stationlon","text":"Longitude for the station. Return FLOAT","title":"Station.lon"},{"location":"modules/#stationname","text":"Returns the full name for the station. Return STR","title":"Station.name"},{"location":"modules/#stationproject","text":"ICOS Carbon Portal is a data portal from and for the ICOS community. However, the data portal does host more than ICOS data. The station association is listed here (if available) Return LIST","title":"Station.project"},{"location":"modules/#stationstationid","text":"Set or retrieve the StationId Return STR","title":"Station.stationId"},{"location":"modules/#stationtheme","text":"For ICOS stations a 'theme' is provided. Please note that, a station may belong to more than one theme, but with different themes. For example the stationId \"NOR\" (Norunda, Sweden), will give you access to the atmospheric data products, whereas the stationId \"SE-Nor\" will return the Ecosystem data products. AS for Atmospheric Stations ES for Ecosystem Stations OS for Ocean Stations Return STR","title":"Station.theme"},{"location":"modules/#stationuri","text":"Link to the landing page for the station. Because a station ID may be associated with more than one 'project' this returns a list of URI's Return LIST","title":"Station.uri"},{"location":"modules/#stationvalid","text":"True if stationId is found. Return BOOL","title":"Station.valid"},{"location":"modules/#convenience-functions","text":"The following three functions are recommend to get information about the available stations at the Carbon Portal and how to get a valid station object (or list of):","title":"Convenience functions"},{"location":"modules/#getidlist","text":"station.getIdList(project='ICOS', sort='name') This returns a DataFrame with columns: ['uri', 'id', 'name', 'country', 'lat', 'lon', 'elevation', 'project', 'theme'] By default ICOS certified stations are returned. If project is set to 'all', all known stations (to the Carbon Portal) are returned. By default the DataFrame is sorted by name. You can provide any column name as sorting parameter. The 'id' of the record, can be used to instantiate a station. Hence it is easy to adjust and filter these records and use the column 'id' as input for station.get() Return Pandas DataFrame","title":".getIdList()"},{"location":"modules/#get","text":"station.get('StationID') Provide a valid station id (see getIdList()) to create a Station object. NOTE: stationId is CaseSensitive. Return Station Object","title":".get()"},{"location":"modules/#getlist","text":"station.getList(theme=['AS','ES','OS'], ids=None) This is the easiest way to get a list of ICOS stations. By default a full list of all certified ICOS stations is returned. You can filter the output by provided a list of themes OR you can provide a list of station id's. NOTE: If you provide a list of id's, the theme filter is ignored. .getList(['as', 'os']) list with ICOS atmospheric and ocean stations .getList(ids=['NOR', 'HTM', 'HUN']) list with stations NOR (Norunda), HTM (Hyltemossa), HUN (Hegyhatsal) Return LIST[Station Objects]","title":".getList()"},{"location":"modules/#sparql","text":"At the ICOS Carbon Portal we store all data and meta data as linked data in a triple store. For more information about this approach refer to Semantic Web , Resource Description Framework (RDF) , and Triple Stores . This module is a simple interface to the SPARQL endpoint at the Carbon Portal. You can write your own queries and use the module to query the database or use some of the provided built in queries. Load the module with: from icoscp.sparql.runsparql import RunSparql classmethod RunSparql(sparql_query='', output_format='txt') sparql_query needs to be a valid query. You can test a query directly at the online SPARQL endpoint at https://meta.icos-cp.eu/sparqlclient/?type=CSV . The ouput format is by default (txt/json) but you can adjust with the following formats ['json', 'csv', 'dict', 'pandas', 'array', 'html'].","title":"sparql"},{"location":"modules/#runsparqldata","text":"If a query is set and the method .run() was executed, it returns the result from the SPARQL endpoint. If no data is available the method returns False as BOOL. Return BOOL | STR","title":"RunSparql.data"},{"location":"modules/#runsparqlquery-query","text":"Retrieve or set the query. Return STR","title":"RunSparql.query = 'query'"},{"location":"modules/#runsparqlformat-fmt","text":"Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return STR","title":"RunSparql.format = 'fmt'"},{"location":"modules/#runsparqlformat-fmt_1","text":"Retrieve or set the output format. fmt = 'json', 'csv', 'dict', 'pandas', 'array', 'html' Return TUPLE | FMT","title":"RunSparql.format = 'fmt'"},{"location":"modules/#runsparqlrun","text":"This method actually executes the query and formats the result to the output format. If the sparql query is not executable because of syntax errors, for example, a TUPLE is returned (False, 'Bad Request') Return TUPLE | FMT cd20200715","title":"RunSparql.run()"}]}