{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ICOS Carbon Portal Python Library About ICOS The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ This library provides an easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from dowloading and maintaining a local copy of data files and if you choose to use our Juypter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data\" approach, to store and use the data locally, we suggest you go to the website and \"download\" the data. The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data, to give all the users easy tools for provenance, citation and reprocuibility. Hence you only need to store a list of pid's (persistent digital object identifiers) in your software to reproduce always exactly the same result, regardless on which computer you run it. You can share your code with colleges, whithout the need of moving data around. Basically you bring the software to the data, rather then data to the software. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"#welcome-to-the-icos-carbon-portal-python-library","text":"","title":"Welcome to the ICOS Carbon Portal Python Library"},{"location":"#about-icos","text":"The Integrated Carbon Observation System, ICOS, is a European-wide greenhouse gas research infrastructure. ICOS produces standardised data on greenhouse gas concentrations in the atmosphere, as well as on carbon fluxes between the atmosphere, the earth and oceans. This information is being used by scientists as well as by decision makers in predicting and mitigating climate change. The high-quality and open ICOS data is based on the measurements from 134 stations across 12 European countries. For more information please visit https://www.icos-cp.eu/ This library provides an easy access to data hosted at the ICOS Carbon Portal ( https://data.icos-cp.eu/ ). By using this library you can load data files directly into memory. The approach of this library is to free you from dowloading and maintaining a local copy of data files and if you choose to use our Juypter Hub services, you don't even need computational power. If you would rather stick to the conventional \"download the data\" approach, to store and use the data locally, we suggest you go to the website and \"download\" the data. The ICOS Carbon Portal provides persistent digital object identifiers for each data set or file to improve the FAIR-ness of data, to give all the users easy tools for provenance, citation and reprocuibility. Hence you only need to store a list of pid's (persistent digital object identifiers) in your software to reproduce always exactly the same result, regardless on which computer you run it. You can share your code with colleges, whithout the need of moving data around. Basically you bring the software to the data, rather then data to the software.","title":"About ICOS"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"examples/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Examples"},{"location":"examples/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"examples/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"examples/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"install/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Installation"},{"location":"install/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"install/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"install/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"modules/","text":"Content Currently we provide three main packages within the library to find and access data hosted at the Carbon Portal. After a succesful installation into your python environment you should be able to load the library with: from icoscp.cpb import Dobj from icoscp.station import station from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls dobj This is the basic package to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal (https://data.icos-cp.eu) to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistend identifier in the form of a URL. Hence each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). load the package with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') Default is empty, but you can initialise a Dobj with a PID. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') Attributes: Dobj.dobj = PID set or retrieve the PID for the Dobj. If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is succesfull, the 'valid' property is set to True return STR Dobj.valid True if PID is set and found at the ICOS Carbon Portal return BOOL Dobj.dateTimeConvert Dobj.station Dobj.lat Dobj.lon Dobj.elevation Dobj.info Methods: - Dobj.get() station sparql mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Modules"},{"location":"modules/#content","text":"Currently we provide three main packages within the library to find and access data hosted at the Carbon Portal. After a succesful installation into your python environment you should be able to load the library with: from icoscp.cpb import Dobj from icoscp.station import station from icoscp.sparql.runsparql import RunSparql from icoscp.sparql import sparqls","title":"Content"},{"location":"modules/#dobj","text":"This is the basic package to load a d igital obj ect (data set) into memory. You need to know a valid persistent identifier (PID/URL) to access the data. Either you can browse the data portal (https://data.icos-cp.eu) to find PID's or you can use the 'station' package to find PID's programatically (see section station ). In essence each data object is linked to a unique and persistend identifier in the form of a URL. Hence each data object has an online landing page. If you select any data object on https://data.icos-cp.eu and then navigate to the PID link (which looks like 11676/j7-Lxlln8_ysi4DEV8qine_v ) you end up on the 'landing' page of the document. If you look at the address bar of your browser, you will see an URL similar to https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v . To access the data you need to know this URL or the last part of the URL (j7-Lxlln8_ysi4DEV8qine_v). load the package with: from icoscp.cpb.dobj import Dobj classmethod Dobj(digitalObject='') Default is empty, but you can initialise a Dobj with a PID. myDobj = Dobj('https://meta.icos-cp.eu/objects/j7-Lxlln8_ysi4DEV8qine_v') myDobj = Dobj('j7-Lxlln8_ysi4DEV8qine_v') Attributes: Dobj.dobj = PID set or retrieve the PID for the Dobj. If a PID is set, an automatic chekck is performed to find the meta data for the object. If this is succesfull, the 'valid' property is set to True return STR Dobj.valid True if PID is set and found at the ICOS Carbon Portal return BOOL Dobj.dateTimeConvert Dobj.station Dobj.lat Dobj.lon Dobj.elevation Dobj.info Methods: - Dobj.get()","title":"dobj"},{"location":"modules/#station","text":"","title":"station"},{"location":"modules/#sparql","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"sparql"}]}